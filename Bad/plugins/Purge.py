from asyncio import sleep
from pyrogram import filters
from pyrogram.enums import ChatType, ChatMemberStatus
from pyrogram.errors import MessageDeleteForbidden, RPCError
from pyrogram.types import Message
from Bad import app
from Pbx import Owner

@app.on_message(filters.command("purge"))
async def purge(app: app, msg: Message):
    member = await msg.chat.get_member(msg.from_user.id)
    if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
        return 

    if msg.chat.type != ChatType.SUPERGROUP:
        await msg.reply_text(text="**…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ò·¥ú Ä…¢·¥á ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ ·¥Ä  ô·¥Äs…™·¥Ñ …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä·¥ã·¥á s·¥ú·¥ò·¥á Ä …¢ Ä·¥è·¥ú·¥ò.**")
        return

    if msg.reply_to_message:
        message_ids = list(range(msg.reply_to_message.id, msg.id))

        def divide_chunks(l: list, n: int = 100):
            for i in range(0, len(l), n):
                yield l[i : i + n]


        m_list = list(divide_chunks(message_ids))

        try:
            for plist in m_list:
                await app.delete_messages(chat_id=msg.chat.id, message_ids=plist, revoke=True)

            await msg.delete()
        except MessageDeleteForbidden:
            await msg.reply_text(text="**…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü ·¥ç·¥áss·¥Ä…¢·¥ás. ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥ç·¥Ä è  ô·¥á ·¥õ·¥è·¥è ·¥è ü·¥Ö, …™ ·¥ç…™…¢ ú·¥õ …¥·¥è·¥õ  ú·¥Ä·¥†·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á  Ä…™…¢ ú·¥õs, ·¥è Ä ·¥õ ú…™s ·¥ç…™…¢ ú·¥õ …¥·¥è·¥õ  ô·¥á ·¥Ä s·¥ú·¥ò·¥á Ä…¢ Ä·¥è·¥ú·¥ò.**")
            return

        except RPCError as ef:
            await msg.reply_text(text=f"**s·¥è·¥ç·¥á ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö, **")
        count_del_msg = len(message_ids)
        sumit = await msg.reply_text(text=f"·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö <i>{count_del_msg}</i> ·¥ç·¥áss·¥Ä…¢·¥ás")
        await sleep(3)
        await sumit.delete()
        return
    await msg.reply_text("** Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥ò·¥ú Ä…¢·¥á !**")
    return





@app.on_message(filters.command("spurge"))
async def spurge(app: app, msg: Message):
    member = await msg.chat.get_member(msg.from_user.id)
    if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
        return 
  

    if msg.chat.type != ChatType.SUPERGROUP:
        await msg.reply_text(text="**…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ò·¥ú Ä…¢·¥á ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ ·¥Ä  ô·¥Äs…™·¥Ñ …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä·¥ã·¥á s·¥ú·¥ò·¥á Ä …¢ Ä·¥è·¥ú·¥ò.**")
        return

    if msg.reply_to_message:
        message_ids = list(range(msg.reply_to_message.id, msg.id))

        def divide_chunks(l: list, n: int = 100):
            for i in range(0, len(l), n):
                yield l[i : i + n]

        m_list = list(divide_chunks(message_ids))

        try:
            for plist in m_list:
                await app.delete_messages(chat_id=msg.chat.id, message_ids=plist, revoke=True)
            await msg.delete()
        except MessageDeleteForbidden:
            await msg.reply_text(text="**…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü ·¥ç·¥áss·¥Ä…¢·¥ás. ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥ç·¥Ä è  ô·¥á ·¥õ·¥è·¥è ·¥è ü·¥Ö, …™ ·¥ç…™…¢ ú·¥õ …¥·¥è·¥õ  ú·¥Ä·¥†·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á  Ä…™…¢ ú·¥õs, ·¥è Ä ·¥õ ú…™s ·¥ç…™…¢ ú·¥õ …¥·¥è·¥õ  ô·¥á ·¥Ä s·¥ú·¥ò·¥á Ä…¢ Ä·¥è·¥ú·¥ò.**")
            return

        except RPCError as ef:
            await msg.reply_text(text=f"**s·¥è·¥ç·¥á ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö,  Ä·¥á·¥ò·¥è Ä·¥õ …™·¥õ ·¥ús…™…¥…¢** `/bug`<b>·¥á Ä Ä·¥è Ä:</b> <code>{ef}</code>")           
            return        
    await msg.reply_text("** Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥ò·¥ú Ä…¢·¥á !**")
    return


@app.on_message(filters.command("del"))
async def del_msg(app: app, msg: Message):
    user = msg.from_user.id
    if user in Owner:
        pass
    else:
         member = await msg.chat.get_member(user)
         if member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
             pass
         else:
             return 
    
    if msg.reply_to_message:
        await msg.delete()
        await app.delete_messages(chat_id=msg.chat.id, message_ids=msg.reply_to_message.id)
    else:
        await msg.reply_text(text="**·¥° ú·¥Ä·¥õ ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á.**")
        return

__MODULE__ = "·¥ò·¥ú Ä…¢·¥á"
__HELP__ = """ 

## ·¥ò·¥ú Ä…¢·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± üßπ

¬ª `/purge` :  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥ÄÍú∞·¥õ·¥á Ä …™·¥õ, …™…¥·¥Ñ ü·¥ú·¥Ö…™…¥…¢ ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥è…¥·¥á.

¬ª `/spurge` : Íú±·¥Ä·¥ç·¥á ·¥ÄÍú± `/purge`,  ô·¥ú·¥õ ·¥Ö·¥è·¥áÍú± …¥·¥è·¥õ Íú±·¥á…¥·¥Ö ·¥Ä…¥ è Íú∞…™…¥·¥Ä ü  Ä·¥á·¥ò ü è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á. ·¥Ñ ü·¥á·¥Ä…¥·¥á Ä ·¥†·¥á ÄÍú±…™·¥è…¥ Íú∞·¥è Ä Íú±·¥õ·¥á·¥Ä ü·¥õ ú ·¥ò·¥ú Ä…¢…™…¥…¢.

¬ª `/del` :  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á …™·¥õ ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ Ä…™…¢…¢·¥á Ä.

‚ùñ  ô·¥è·¥õ ·¥ç·¥úÍú±·¥õ  ô·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥ò·¥á Ä·¥ç…™Íú±Íú±…™·¥è…¥Íú±  
‚ùñ ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥Íú± ·¥è Ä ·¥è·¥°…¥·¥á ÄÍú± ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú·¥áÍú±·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±  
‚ùñ ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ Íú±·¥ú·¥ò·¥á Ä…¢ Ä·¥è·¥ú·¥òÍú±  

"""

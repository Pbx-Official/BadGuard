import asyncio
import time
import random

from pyrogram import filters
from pyrogram.enums import ParseMode
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

import config
from config import BANNED_USERS, START_IMG_URL
from Bad import app
from Bad.misc import SUDOERS, _boot_
from Bad.database.database import (
    add_served_chat,
    add_served_user,
    is_banned_user,
    is_on_off,
    is_served_private_chat,
)
from Bad.database.Buttons import alive_panel, start_pannel
from .help import paginate_modules

# Helper function for uptime
def get_readable_time(seconds: int) -> str:
    count = 0
    up_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "d"]

    while count < 4:
        count += 1
        if count < 3:
            remainder, result = divmod(seconds, 60)
        else:
            remainder, result = divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)
    for i in range(len(time_list)):
        up_time += str(time_list[i]) + time_suffix_list[i]
    return up_time[::-1]


STICKER = [
    "CAACAgUAAx0CepnpNQABATUjZypavrymDoERINkF-M3u9JDQ6K8AAhoDAAIOnnlVpyrYiDnVgWYeBA",
]

@app.on_message(group=-1)
async def ban_new(client, message):
    user_id = (
        message.from_user.id if message.from_user and message.from_user.id else 777000
    )
    chat_name = message.chat.title if message.chat.title else ""
    if await is_banned_user(user_id):
        try:
            alert_message = f"üò≥"
            BAN = await message.chat.ban_member(user_id)
            if BAN:
                await message.reply_text(alert_message)
        except:
            pass


@app.on_message(filters.command(["start"]) & filters.group & ~BANNED_USERS)
async def testbot(client, message: Message):
    try:
        chat_id = message.chat.id
        try:
            # Try downloading the group's photo
            groups_photo = await client.download_media(
                message.chat.photo.big_file_id, file_name=f"chatpp{chat_id}.png"
            )
            chat_photo = groups_photo if groups_photo else START_IMG_URL
        except AttributeError:
            # If there's no chat photo, use the default image
            chat_photo = START_IMG_URL

        # Get the alive panel and uptime
        out = alive_panel({})
        uptime = int(time.time() - _boot_)

        # Hardcoded caption
        caption_text = (
            f"{client.mention} …™s ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è.\n\n"
            f"<b>‚ú´ ·¥ú·¥ò·¥õ…™·¥ç·¥á :</b> {get_readable_time(uptime)}"
        )

        # Send the response with the group photo or fallback to START_IMG_URL
        await message.reply_photo(
            photo=chat_photo,
            caption=caption_text,
            reply_markup=InlineKeyboardMarkup(out),
        )

        # Add the chat to the served chat list
        await add_served_chat(chat_id)

    except Exception as e:
        print(f"Error: {e}")

@app.on_message(filters.new_chat_members, group=3)
async def welcome(client, message: Message):
    chat_id = message.chat.id

    # Private bot mode check
    if config.PRIVATE_BOT_MODE == str(True):
        if not await is_served_private_chat(chat_id):
            await message.reply_text(
                "**·¥õ ú…™s  ô·¥è·¥õ's ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥ç·¥è·¥Ö·¥á  ú·¥Äs  ô·¥á·¥á…¥ ·¥á…¥·¥Ä ô ü·¥á·¥Ö. ·¥è…¥ ü è ·¥ç è ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s. …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á, ·¥õ ú·¥á…¥ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á  è·¥è·¥ú Ä ·¥è·¥°…¥ ·¥è Ä …¢·¥á·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.**"
            )
            return await client.leave_chat(chat_id)
    else:
        await add_served_chat(chat_id)

    for member in message.new_chat_members:
        try:
            # If bot itself joins the chat
            if member.id == client.id:
                try:
                    groups_photo = await client.download_media(
                        message.chat.photo.big_file_id, file_name=f"chatpp{chat_id}.png"
                    )
                    chat_photo = groups_photo if groups_photo else START_IMG_URL
                except AttributeError:
                    chat_photo = START_IMG_URL

                out = start_pannel({})
                await message.reply_photo(
                    photo=chat_photo,
                    caption="**‡πè ·¥õ ú…™s …™s ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä  ô·¥è·¥õ “ì·¥è Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥òs + ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥†·¥Ñ.**\n\n**üéß ·¥ò ü·¥Ä è + ·¥†·¥ò ü·¥Ä è + ·¥Ñ·¥ò ü·¥Ä è + ·¥Ñ·¥†·¥ò ü·¥Ä è üéß**\n\n**‚û• s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á -  ü·¥á“ì·¥õ …¥·¥è·¥õ…™·¥Ñ·¥á, ·¥õ·¥Ä…¢·¥Ä ü ü, ·¥†·¥Ñ·¥õ·¥Ä…¢,  ô·¥Ä…¥ - ·¥ç·¥ú·¥õ·¥á, s ú·¥Ä è Ä…™,  ü·¥ú Ä…™·¥Ñs, s·¥è…¥…¢ - ·¥†…™·¥Ö·¥á·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö, ·¥á·¥õ·¥Ñ... **\n\n**üîê·¥úÍú±·¥á ¬ª /help ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.** üíû",
                    reply_markup=InlineKeyboardMarkup(out),
                )

            # Owner joined
            if member.id in config.OWNER_ID:
                return await message.reply_text(
                    f"·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥è“ì {client.mention}, {member.mention} ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ."
                )

            # SUDOERS joined
            if member.id in SUDOERS:
                return await message.reply_text(
                    f"·¥õ ú·¥á s·¥ú·¥Ö·¥è ·¥ús·¥á Ä ·¥è“ì {client.mention}, {member.mention} ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ."
                )
            return

        except Exception as e:
            print(f"Error: {e}")
            return

@app.on_callback_query(filters.regex("go_to_start"))
async def go_to_home(client, callback_query: CallbackQuery):
    out = start_pannel({})
    await callback_query.message.edit_text(
        text="**‡πè ·¥õ ú…™s …™s ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä  ô·¥è·¥õ “ì·¥è Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥òs + ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥†·¥Ñ.**\n\n**üéß ·¥ò ü·¥Ä è + ·¥†·¥ò ü·¥Ä è + ·¥Ñ·¥ò ü·¥Ä è + ·¥Ñ·¥†·¥ò ü·¥Ä è üéß**\n\n**‚û• s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á -  ü·¥á“ì·¥õ …¥·¥è·¥õ…™·¥Ñ·¥á, ·¥õ·¥Ä…¢·¥Ä ü ü, ·¥†·¥Ñ·¥õ·¥Ä…¢,  ô·¥Ä…¥ - ·¥ç·¥ú·¥õ·¥á, s ú·¥Ä è Ä…™,  ü·¥ú Ä…™·¥Ñs, s·¥è…¥…¢ - ·¥†…™·¥Ö·¥á·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö, ·¥á·¥õ·¥Ñ... **\n\n**üîê·¥úÍú±·¥á ¬ª /help ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.** üíû",
        reply_markup=InlineKeyboardMarkup(out),
    )

__MODULE__ = " ô·¥è·¥õ"
__HELP__ = f"""
<b>‚ú¶ c s·¥õ·¥Ä…¥·¥Ös “ì·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ò ü·¥Ä è.</b>

<b>‚òÖ /stats</b> - G·¥á·¥õ T·¥è·¥ò ùü∑ùü∂ T Ä·¥Ä·¥Ñ·¥ãs G ü·¥è ô·¥Ä ü S·¥õ·¥Ä·¥õs, T·¥è·¥ò ùü∑ùü∂ Us·¥á Äs ·¥è“ì  ô·¥è·¥õ, T·¥è·¥ò ùü∑ùü∂ C ú·¥Ä·¥õs ·¥è…¥  ô·¥è·¥õ, T·¥è·¥ò ùü∑ùü∂ P ü·¥Ä è·¥á Äs ·¥è…¥  ô·¥è·¥õ.

<b>‚òÖ /sudolist</b> - C ú·¥á·¥Ñ·¥ã S·¥ú·¥Ö·¥è Us·¥á Äs ·¥è“ì B·¥è·¥õ

<b>‚òÖ /lyrics [M·¥ús…™·¥Ñ N·¥Ä·¥ç·¥á]</b> - S·¥á·¥Ä Ä·¥Ñ ú·¥ás L è Ä…™·¥Ñs “ì·¥è Ä ·¥õ ú·¥á ·¥ò·¥Ä Ä·¥õ…™·¥Ñ·¥ú ü·¥Ä Ä M·¥ús…™·¥Ñ ·¥è…¥ ·¥°·¥á ô.

<b>‚òÖ /song [T Ä·¥Ä·¥Ñ·¥ã N·¥Ä·¥ç·¥á] ·¥è Ä [YT L…™…¥·¥ã]</b> - D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä…¥ è ·¥õ Ä·¥Ä·¥Ñ·¥ã “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á …™…¥ ·¥ç·¥òùüπ ·¥è Ä ·¥ç·¥òùü∑ “ì·¥è Ä·¥ç·¥Ä·¥õs.

<b>‚òÖ /player</b> - G·¥á·¥õ ·¥Ä …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á P ü·¥Ä è…™…¥…¢ P·¥Ä…¥·¥á ü.

<b>‚òÖ /queue ·¥è Ä /cqueue</b> - C ú·¥á·¥Ñ·¥ã Q·¥ú·¥á·¥ú·¥á L…™s·¥õ ·¥è“ì M·¥ús…™·¥Ñ.

    <u><b>‚ö°Ô∏èP Ä…™·¥†·¥Ä·¥õ·¥á B·¥è·¥õ:</b></u>
      
<b>‚úß /authorize [CHAT_ID]</b> - A ü ü·¥è·¥° ·¥Ä ·¥Ñ ú·¥Ä·¥õ “ì·¥è Ä ·¥ús…™…¥…¢  è·¥è·¥ú Ä  ô·¥è·¥õ.

<b>‚úß /unauthorize[CHAT_ID]</b> - D…™s·¥Ä ü ü·¥è·¥° ·¥Ä ·¥Ñ ú·¥Ä·¥õ “ì Ä·¥è·¥ç ·¥ús…™…¥…¢  è·¥è·¥ú Ä  ô·¥è·¥õ.

<b>‚úß /authorized</b> - C ú·¥á·¥Ñ·¥ã ·¥Ä ü ü ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥è“ì  è·¥è·¥ú Ä  ô·¥è·¥õ.
"""

from pyrogram import enums
from pyrogram.enums import ChatType
from pyrogram import filters, Client
from Bad import app
from pyrogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from Pbx import Owner

@app.on_message(filters.command("pin"))
async def pin(_, message):
    replied = message.reply_to_message
    chat_title = message.chat.title
    chat_id = message.chat.id
    user_id = message.from_user.id
    chat = message.chat
    name = message.from_user.mention
    if message.chat.type == enums.ChatType.PRIVATE:
        return await message.reply_text("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ ü è ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs !**")
    if not replied:
        await message.reply_text("** Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ò…™…¥ …™·¥õ !**")
    else:
        if user_id in Owner:
            pass
        else:
            member = await chat.get_member(user_id)
            if member.status in (enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER):
                if member.privileges.can_pin_messages:
                    pass
                else:
                    msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õÍú± ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥õ ú…™Íú± ·¥Ä·¥Ñ·¥õ…™·¥è…¥.."
                    return await message.reply_text(msg_text)
            else:
                msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õÍú± ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥õ ú…™Íú± ·¥Ä·¥Ñ·¥õ…™·¥è…¥."
                return await message.reply_text(msg_text)
    await message.reply_to_message.pin()
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ò…™…¥…¥·¥á·¥Ö\n\n Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è - {name}")
                

@app.on_message(filters.command("pinned"))
async def pinned(_, message):
    chat = await app.get_chat(message.chat.id)
    if not chat.pinned_message:
        return await message.reply_text("**…¥·¥è ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á “ì·¥è·¥ú…¥·¥Ö**")
    try:        
        await message.reply_text(" ú·¥á Ä·¥á …™s ·¥õ ú·¥á  ü·¥Ä·¥õ·¥ás·¥õ ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á",reply_markup=
        InlineKeyboardMarkup([[InlineKeyboardButton(text="üìù ·¥†…™·¥á·¥° ·¥ç·¥áss·¥Ä…¢·¥á",url=chat.pinned_message.link)]]))  
    except Exception as er:
        await message.reply_text(er)



@app.on_message(filters.command("unpin"))
async def unpin(_, message):
    replied = message.reply_to_message
    chat_title = message.chat.title
    chat_id = message.chat.id
    chat = mesaage.chat
    user_id = message.from_user.id
    name = message.from_user.mention

    if message.chat.type == enums.ChatType.PRIVATE:
        return await message.reply_text("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ ü è ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs !**")
    if not replied:
        await message.reply_text("** Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ú…¥·¥ò…™…¥ …™·¥õ !**")
    else:
        if user_id in Owner:
            pass
        else:
            member = await chat.get_member(user_id)
            if member.status in (enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER):
                if member.privileges.can_pin_messages:
                    pass
                else:
                    msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õÍú± ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥õ ú…™Íú± ·¥Ä·¥Ñ·¥õ…™·¥è…¥.."
                    return await message.reply_text(msg_text)
            else:
                msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õÍú± ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥õ ú…™Íú± ·¥Ä·¥Ñ·¥õ…™·¥è…¥."
                return await message.reply_text(msg_text)
    await message.reply_to_message.unpin()
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ú…¥·¥ò…™…¥…¥·¥á·¥Ö \n\n Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è - {name}")
                






@app.on_message(filters.command("removephoto"))
async def deletechatphoto(client, message):
    chat_id = message.chat.id
    chat = message.chat
    user_id = message.from_user.id
    name = message.from_user.mention
    msg = await message.reply_text("**·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢....**")
    admin_check = await message.chat.get_member(user_id)
    
    if message.chat.type == enums.ChatType.PRIVATE:
        await msg.edit("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs!**")
        return
    
    if user_id in Owner:
        pass
    else:
        member = await chat.get_member(user_id)
        if member.status in (enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER):
            if member.privileges.can_change_info:
                pass
            else:
                msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.."
                return await message.reply_text(msg_text)
        else:
            msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥."
            return await message.reply_text(msg_text)
    
    await client.delete_chat_photo(chat_id)
    await message.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ò ú·¥è·¥õ·¥è\n\n Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è - {name}")





@app.on_message(filters.command("setphoto"))
async def setchatphoto(client, message):
    reply = message.reply_to_message
    chat_id = message.chat.id
    user_id = message.from_user.id
    chat = message.chat
    msg = await message.reply_text("·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...")
    admin_check = await message.chat.get_member(user_id)
    
    if message.chat.type == enums.ChatType.PRIVATE:
        await msg.edit("`·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs!`")
        return
    
    if not reply:
        return await msg.edit("** Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ò ú·¥è·¥õ·¥è ·¥è Ä ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ.**")
    
    if reply:
        if user_id in Owner:
            pass
        else:
            member = await chat.get_member(user_id)
            if member.status in (enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER):
                if member.privileges.can_change_info:
                    pass
                else:
                    msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õÍú± ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥õ ú…™Íú± ·¥Ä·¥Ñ·¥õ…™·¥è…¥.."
                    return await message.reply_text(msg_text)
            else:
                msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õÍú± ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥õ ú…™Íú± ·¥Ä·¥Ñ·¥õ…™·¥è…¥."
                return await message.reply_text(msg_text)
    
    photo = await reply.download()
    await message.chat.set_photo(photo=photo)
    await message.reply_text(f"Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥á·¥õ …¥·¥á·¥° ·¥ò ú·¥è·¥õ·¥è\n\n Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è {message.from_user.mention}")




from pyrogram import Client, filters, enums

@app.on_message(filters.command("settitle"))
async def setgrouptitle(client, message):
    reply = message.reply_to_message
    chat_id = message.chat.id
    user_id = message.from_user.id
    chat = message.chat
    msg = await message.reply_text("·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...")
    
    if message.chat.type == enums.ChatType.PRIVATE:
        return await msg.edit("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs!**")
    
    if message.reply_to_message and message.reply_to_message.text:
        title = message.reply_to_message.text
        admin_check = await message.chat.get_member(user_id)
        
        if user_id in Owner:  # Assuming `Owner` is a list of user IDs
            pass
        else:
            member = await chat.get_member(user_id)
            if member.status in (enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER):
                if member.privileges.can_change_info:
                    pass
                else:
                    msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.."
                    return await message.reply_text(msg_text)
            else:
                msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥."
                return await message.reply_text(msg_text)
        
        await message.chat.set_title(title)
        await msg.edit(f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò ·¥õ…™·¥õ ü·¥á!\n ô è** {message.from_user.mention}")
    
    elif len(message.command) > 1:
        title = message.text.split(None, 1)[1]
        
        if user_id in Owner:  # Assuming `Owner` is a list of user IDs
            pass
        else:
            member = await chat.get_member(user_id)
            if member.status in (enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER):
                if member.privileges.can_change_info:
                    pass
                else:
                    msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.."
                    return await message.reply_text(msg_text)
            else:
                msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥."
                return await message.reply_text(msg_text)
        
        await message.chat.set_title(title)
        await msg.edit(f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò ·¥õ…™·¥õ ü·¥á!\n ô è** {message.from_user.mention}")
    
    else:
        await msg.edit("** è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥õ·¥áx·¥õ ·¥è Ä …¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥õ·¥áx·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥õ…™·¥õ ü·¥á**")


@app.on_message(filters.command("setdiscription"))
async def setg_discription(client, message):
    reply = message.reply_to_message
    chat_id = message.chat.id
    chat = message.chat
    user_id = message.from_user.id
    msg = await message.reply_text("**·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...**")
    
    if message.chat.type == enums.ChatType.PRIVATE:
        await msg.edit("**·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãs ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs!**")
        return
    
    if message.reply_to_message and message.reply_to_message.text:
        discription = message.reply_to_message.text
        
        if user_id in Owner:
            pass
        else:
            member = await chat.get_member(user_id)
            if member.status in (enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER):
                if member.privileges.can_change_info:
                    pass
                else:
                    msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.."
                    return await message.reply_text(msg_text)
            else:
                msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥."
                return await message.reply_text(msg_text)
        
        await message.chat.set_description(discription)
        await msg.edit(f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥!\n ô è** {message.from_user.mention}")
    
    elif len(message.command) > 1:
        discription = message.text.split(None, 1)[1]
        
        if user_id in Owner:
            pass
        else:
            member = await chat.get_member(user_id)
            if member.status in (enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER):
                if member.privileges.can_change_info:
                    pass
                else:
                    msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.."
                    return await message.reply_text(msg_text)
            else:
                msg_text = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥."
                return await message.reply_text(msg_text)
        
        await message.chat.set_description(discription)
        await msg.edit(f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥!\n ô è** {message.from_user.mention}")
    
    else:
        await msg.edit("** è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥õ·¥áx·¥õ ·¥è Ä …¢…™·¥†·¥á s·¥è·¥ç·¥á ·¥õ·¥áx·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥!**")


@app.on_message(filters.command(["admins","staff"]))
async def admins(client, message):
  try: 
    adminList = []
    ownerList = []
    async for admin in app.get_chat_members(message.chat.id, filter=enums.ChatMembersFilter.ADMINISTRATORS):
      if admin.privileges.is_anonymous == False:
        if admin.user.is_bot == True:
          pass
        elif admin.status == enums.ChatMemberStatus.OWNER:
          ownerList.append(admin.user)
        else:  
          adminList.append(admin.user)
      else:
        pass   
    lenAdminList= len(ownerList) + len(adminList)  
    text2 = f"**…¢ Ä·¥è·¥ú·¥ò s·¥õ·¥Ä“ì“ì - {message.chat.title}**\n\n"
    try:
      owner = ownerList[0]
      if owner.username == None:
        text2 += f"üëë ·¥è·¥°…¥·¥á Ä\n‚îî {owner.mention}\n\nüëÆüèª ·¥Ä·¥Ö·¥ç…™…¥s\n"
      else:
        text2 += f"üëë ·¥è·¥°…¥·¥á Ä\n‚îî @{owner.username}\n\nüëÆüèª ·¥Ä·¥Ö·¥ç…™…¥s\n"
    except:
      text2 += f"üëë ·¥è·¥°…¥·¥á Ä\n‚îî <i>Hidden</i>\n\nüëÆüèª ·¥Ä·¥Ö·¥ç…™…¥s\n"
    if len(adminList) == 0:
      text2 += "‚îî <i>·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä Ä·¥á  ú…™·¥Ö·¥Ö·¥á…¥</i>"  
      await app.send_message(message.chat.id, text2)   
    else:  
      while len(adminList) > 1:
        admin = adminList.pop(0)
        if admin.username == None:
          text2 += f"‚îú {admin.mention}\n"
        else:
          text2 += f"‚îú @{admin.username}\n"    
      else:    
        admin = adminList.pop(0)
        if admin.username == None:
          text2 += f"‚îî {admin.mention}\n\n"
        else:
          text2 += f"‚îî @{admin.username}\n\n"
      text2 += f"‚úÖ | **·¥õ·¥è·¥õ·¥Ä ü …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì ·¥Ä·¥Ö·¥ç…™…¥s**: {lenAdminList}"  
      await app.send_message(message.chat.id, text2)           
  except FloodWait as e:
    await asyncio.sleep(e.value)       


@app.on_message(filters.command("bots"))
async def bots(client, message):  
  try:    
    botList = []
    async for bot in app.get_chat_members(message.chat.id, filter=enums.ChatMembersFilter.BOTS):
      botList.append(bot.user)
    lenBotList = len(botList) 
    text3  = f"** ô·¥è·¥õ  ü…™s·¥õ - {message.chat.title}**\n\nü§ñ  ô·¥è·¥õs\n"
    while len(botList) > 1:
      bot = botList.pop(0)
      text3 += f"‚îú @{bot.username}\n"    
    else:    
      bot = botList.pop(0)
      text3 += f"‚îî @{bot.username}\n\n"
      text3 += f"‚úÖ | *·¥õ·¥è·¥õ·¥Ä ü …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  ô·¥è·¥õs**: {lenBotList}"  
      await app.send_message(message.chat.id, text3)
  except FloodWait as e:
    await asyncio.sleep(e.value)


__MODULE__ = "…¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥ç·¥Ö"
__HELP__ = """ 

## …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± üß©

¬ª `/pin` :  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è ·¥ò…™…¥ …™·¥õ
¬ª `/pinned` : ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á  ü·¥ÄÍú±·¥õ ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á
¬ª `/unpin` : ·¥ú…¥·¥ò…™…¥ ·¥Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á  ô è  Ä·¥á·¥ò ü è…™…¥…¢ ·¥õ·¥è …™·¥õ

¬ª `/staff` : …¢·¥á·¥õ ·¥Ä  ü…™Íú±·¥õ ·¥èÍú∞ ·¥Ä ü ü Íú±·¥õ·¥ÄÍú∞Íú∞ …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò
¬ª `/bots` : ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä ü ü  ô·¥è·¥õÍú± ·¥Ä·¥Ö·¥Ö·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò

¬ª `/settitle` : Íú±·¥á·¥õ ·¥Ä …¥·¥á·¥° …¢ Ä·¥è·¥ú·¥ò ·¥õ…™·¥õ ü·¥á
¬ª `/setdescription` : ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò'Íú± ·¥Ö·¥áÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥
¬ª `/setphoto` :  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á ·¥õ·¥è Íú±·¥á·¥õ …™·¥õ ·¥ÄÍú± …¢ Ä·¥è·¥ú·¥ò ·¥ò ú·¥è·¥õ·¥è
¬ª `/removephoto` :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ …¢ Ä·¥è·¥ú·¥ò ·¥ò ú·¥è·¥õ·¥è

"""
